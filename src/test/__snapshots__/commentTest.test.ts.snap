// Bun Snapshot v1, https://goo.gl/fbAQLP

exports[`C: trivial: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node2 [style="filled";
label="node2 START START
empty block
implicit return";
id="node2";
shape="box";
fillcolor="lightgray";
minHeight=0.5;
height=0.8999999999999999;
];
}"
`;

exports[`C: simpleIf: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node1 [style="filled";
label="node1 START START
if-else head
(x)";
id="node1";
shape="invhouse";
fillcolor="#48AB30";
height=0.8999999999999999;
];
    node2 [style="filled";
label="node2 EMPTY empty block";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node5 [style="filled";
label="node5 MERGE if-else merge
implicit return";
id="node5";
shape="house";
fillcolor="#AB3030";
height=0.6;
];
    node1 -> node2 [penwidth=1;
color="green";
];
    node2 -> node5 [penwidth=1;
color="blue";
];
    node1 -> node5 [penwidth=1;
color="red";
];
}"
`;

exports[`C: ifElse: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node1 [style="filled";
label="node1 START START
if-else head
(x)";
id="node1";
shape="invhouse";
fillcolor="#48AB30";
height=0.8999999999999999;
];
    node2 [style="filled";
label="node2 EMPTY empty block";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node3 [style="filled";
label="node3 STATEMENT (y)";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node4 [style="filled";
label="node4 EMPTY empty block";
id="node4";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node5 [style="filled";
label="node5 EMPTY empty block";
id="node5";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node8 [style="filled";
label="node8 MERGE if-else merge
implicit return";
id="node8";
shape="house";
fillcolor="#AB3030";
height=0.6;
];
    node1 -> node2 [penwidth=1;
color="green";
];
    node1 -> node3 [penwidth=1;
color="red";
];
    node3 -> node4 [penwidth=1;
color="green";
];
    node3 -> node5 [penwidth=1;
color="red";
];
    node2 -> node8 [penwidth=1;
color="blue";
];
    node4 -> node8 [penwidth=1;
color="blue";
];
    node5 -> node8 [penwidth=1;
color="blue";
];
}"
`;

exports[`C: forever: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node2 [style="filled";
label="node2 START START
loop head";
id="node2";
shape="invhouse";
fillcolor="#48AB30";
height=0.6;
];
    node4 [style="filled";
label="node4 EMPTY empty block
loop head";
id="node4";
shape="box";
fillcolor="lightgray";
height=0.6;
];
    node2 -> node4 [penwidth=1;
color="blue";
];
    node4 -> node4 [penwidth=2;
color="blue";
];
}"
`;

exports[`C: forever2: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node1 [style="filled";
label="node1 START START
loop head
int a = 0;";
id="node1";
shape="invhouse";
fillcolor="#48AB30";
height=0.8999999999999999;
];
    node2 [style="filled";
label="node2 EMPTY empty block
loop head
++a";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.8999999999999999;
];
    node1 -> node2 [penwidth=1;
color="blue";
];
    node2 -> node2 [penwidth=2;
color="blue";
];
}"
`;

exports[`C: forLoop: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node1 [style="filled";
label="node1 START START
loop head
int a = 0;";
id="node1";
shape="invhouse";
fillcolor="#48AB30";
height=0.8999999999999999;
];
    node2 [style="filled";
label="node2 STATEMENT a < 10";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node8 [style="filled";
label="node8 FOR_EXIT loop exit
implicit return";
id="node8";
shape="house";
fillcolor="#AB3030";
height=0.6;
];
    node3 [style="filled";
label="node3 EMPTY empty block
loop head
++a";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.8999999999999999;
];
    node1 -> node2 [penwidth=1;
color="blue";
];
    node3 -> node2 [penwidth=2;
color="blue";
];
    node2 -> node8 [penwidth=1;
color="red";
];
    node2 -> node3 [penwidth=1;
color="green";
];
}"
`;

exports[`C: whileLoop: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node0 [style="filled";
label="node0 START START";
id="node0";
shape="invhouse";
fillcolor="#48AB30";
height=0.5;
];
    node1 [style="filled";
label="node1 STATEMENT (x())";
id="node1";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node2 [style="filled";
label="node2 EMPTY empty block";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node4 [style="filled";
label="node4 FOR_EXIT loop exit
implicit return";
id="node4";
shape="house";
fillcolor="#AB3030";
height=0.6;
];
    node1 -> node2 [penwidth=1;
color="green";
];
    node2 -> node1 [penwidth=2;
color="blue";
];
    node0 -> node1 [penwidth=1;
color="blue";
];
    node1 -> node4 [penwidth=1;
color="red";
];
}"
`;

exports[`C: doWhile: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node0 [style="filled";
label="node0 START START";
id="node0";
shape="invhouse";
fillcolor="#48AB30";
height=0.5;
];
    node1 [style="filled";
label="node1 EMPTY empty block
(x())";
id="node1";
shape="box";
fillcolor="lightgray";
height=0.6;
];
    node4 [style="filled";
label="node4 FOR_EXIT loop exit
implicit return";
id="node4";
shape="house";
fillcolor="#AB3030";
height=0.6;
];
    node1 -> node1 [penwidth=2;
color="green";
];
    node0 -> node1 [penwidth=1;
color="blue";
];
    node1 -> node4 [penwidth=1;
color="red";
];
}"
`;

exports[`C: gotoA: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node0 [style="filled";
label="node0 START START";
id="node0";
shape="invhouse";
fillcolor="#48AB30";
height=0.5;
];
    node2 [style="filled";
label="node2 LABEL label
if-else head
(x)";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.8999999999999999;
];
    node3 [style="filled";
label="node3 GOTO label";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node6 [style="filled";
label="node6 MERGE if-else merge
implicit return";
id="node6";
shape="house";
fillcolor="#AB3030";
height=0.6;
];
    node2 -> node3 [penwidth=1;
color="green";
];
    node3 -> node2 [penwidth=2;
color="blue";
];
    node0 -> node2 [penwidth=1;
color="blue";
];
    node2 -> node6 [penwidth=1;
color="red";
];
}"
`;

exports[`C: switch_1: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node1 [style="filled";
label="node1 START START

1";
id="node1";
shape="invhouse";
fillcolor="#48AB30";
height=0.8999999999999999;
];
    node2 [style="filled";
label="node2 STATEMENT \"include me!\";";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node3 [style="filled";
label="node3 CASE_CONDITION 2";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node4 [style="filled";
label="node4 EMPTY empty block";
id="node4";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node5 [style="filled";
label="node5 CASE_CONDITION 3";
id="node5";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node6 [style="filled";
label="node6 STATEMENT \"Include me!\";";
id="node6";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node9 [style="filled";
label="node9 SWITCH_MERGE 
implicit return";
id="node9";
shape="house";
fillcolor="#AB3030";
height=0.6;
];
    node1 -> node2 [penwidth=1;
color="green";
];
    node2 -> node4 [penwidth=1;
color="blue";
];
    node1 -> node3 [penwidth=1;
color="red";
];
    node3 -> node4 [penwidth=1;
color="green";
];
    node4 -> node6 [penwidth=1;
color="blue";
];
    node3 -> node5 [penwidth=1;
color="red";
];
    node5 -> node6 [penwidth=1;
color="green";
];
    node5 -> node9 [penwidth=1;
color="red";
];
    node6 -> node9 [penwidth=1;
color="blue";
];
}"
`;

exports[`C: switch_2: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node1 [style="filled";
label="node1 START START

1";
id="node1";
shape="invhouse";
fillcolor="#48AB30";
height=0.8999999999999999;
];
    node2 [style="filled";
label="node2 BREAK BREAK";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node3 [style="filled";
label="node3 CASE_CONDITION 2";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node4 [style="filled";
label="node4 EMPTY empty block";
id="node4";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node5 [style="filled";
label="node5 CASE_CONDITION 3";
id="node5";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node9 [style="filled";
label="node9 SWITCH_MERGE 
implicit return";
id="node9";
shape="house";
fillcolor="#AB3030";
height=0.6;
];
    node6 [style="filled";
label="node6 EMPTY empty block";
id="node6";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node1 -> node2 [penwidth=1;
color="green";
];
    node1 -> node3 [penwidth=1;
color="red";
];
    node3 -> node4 [penwidth=1;
color="green";
];
    node4 -> node6 [penwidth=1;
color="blue";
];
    node3 -> node5 [penwidth=1;
color="red";
];
    node5 -> node6 [penwidth=1;
color="green";
];
    node5 -> node9 [penwidth=1;
color="red";
];
    node6 -> node9 [penwidth=1;
color="blue";
];
    node2 -> node9 [penwidth=1;
color="blue";
];
}"
`;

exports[`Go: trivial: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node2 [style="filled";
label="node2 START START
empty block
implicit return";
id="node2";
shape="box";
fillcolor="lightgray";
minHeight=0.5;
height=0.8999999999999999;
];
}"
`;

exports[`Go: ifThen: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node1 [style="filled";
label="node1 START START
x";
id="node1";
shape="invhouse";
fillcolor="#48AB30";
height=0.6;
];
    node3 [style="filled";
label="node3 EMPTY empty block";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node4 [style="filled";
label="node4 MERGE MERGE
implicit return";
id="node4";
shape="house";
fillcolor="#AB3030";
height=0.6;
];
    node1 -> node3 [penwidth=1;
color="green";
];
    node3 -> node4 [penwidth=1;
color="blue";
];
    node1 -> node4 [penwidth=1;
color="red";
];
}"
`;

exports[`Go: Switch: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node1 [style="filled";
label="node1 START START
x
1";
id="node1";
shape="invhouse";
fillcolor="#48AB30";
height=0.8999999999999999;
];
    node2 [style="filled";
label="node2 EMPTY empty block";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node3 [style="filled";
label="node3 CASE_CONDITION 2";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node4 [style="filled";
label="node4 EMPTY empty block";
id="node4";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node5 [style="filled";
label="node5 CASE_CONDITION 3";
id="node5";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node11 [style="filled";
label="node11 SWITCH_MERGE 
implicit return";
id="node11";
shape="house";
fillcolor="#AB3030";
height=0.6;
];
    node6 [style="filled";
label="node6 EMPTY empty block";
id="node6";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node7 [style="filled";
label="node7 CASE_CONDITION 4";
id="node7";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node8 [style="filled";
label="node8 EMPTY empty block";
id="node8";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node1 -> node2 [penwidth=1;
color="green";
];
    node1 -> node3 [penwidth=1;
color="red";
];
    node3 -> node4 [penwidth=1;
color="green";
];
    node3 -> node5 [penwidth=1;
color="red";
];
    node5 -> node6 [penwidth=1;
color="green";
];
    node5 -> node7 [penwidth=1;
color="red";
];
    node7 -> node8 [penwidth=1;
color="green";
];
    node2 -> node11 [penwidth=1;
color="blue";
];
    node4 -> node11 [penwidth=1;
color="blue";
];
    node6 -> node11 [penwidth=1;
color="blue";
];
    node8 -> node11 [penwidth=1;
color="blue";
];
    node7 -> node11 [penwidth=1;
color="red";
];
}"
`;

exports[`Go: switchAndLabelsAndGoto: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node1 [style="filled";
label="node1 START START
x
1";
id="node1";
shape="invhouse";
fillcolor="#48AB30";
height=0.8999999999999999;
];
    node2 [style="filled";
label="node2 EMPTY empty block";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node3 [style="filled";
label="node3 CASE_CONDITION 2";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node5 [style="filled";
label="node5 CASE_CONDITION 3";
id="node5";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node11 [style="filled";
label="node11 SWITCH_MERGE 
return";
id="node11";
shape="house";
fillcolor="#AB3030";
height=0.6;
];
    node6 [style="filled";
label="node6 EMPTY empty block";
id="node6";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node7 [style="filled";
label="node7 CASE_CONDITION 4";
id="node7";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node13 [style="filled";
label="node13 GOTO label
label
x";
id="node13";
shape="box";
fillcolor="lightgray";
height=0.8999999999999999;
];
    node8 [style="filled";
label="node8 EMPTY empty block";
id="node8";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node15 [style="filled";
label="node15 STATEMENT f()";
id="node15";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node16 [style="filled";
label="node16 STATEMENT g()";
id="node16";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node17 [style="filled";
label="node17 MERGE MERGE
implicit return";
id="node17";
shape="house";
fillcolor="#AB3030";
height=0.6;
];
    node1 -> node2 [penwidth=1;
color="green";
];
    node1 -> node3 [penwidth=1;
color="red";
];
    node3 -> node5 [penwidth=1;
color="red";
];
    node5 -> node6 [penwidth=1;
color="green";
];
    node5 -> node7 [penwidth=1;
color="red";
];
    node7 -> node8 [penwidth=1;
color="green";
];
    node13 -> node15 [penwidth=1;
color="green";
];
    node13 -> node16 [penwidth=1;
color="red";
];
    node2 -> node11 [penwidth=1;
color="blue";
];
    node6 -> node11 [penwidth=1;
color="blue";
];
    node8 -> node11 [penwidth=1;
color="blue";
];
    node7 -> node11 [penwidth=1;
color="red";
];
    node3 -> node13 [penwidth=1;
color="green";
];
    node15 -> node17 [penwidth=1;
color="blue";
];
    node16 -> node17 [penwidth=1;
color="blue";
];
}"
`;

exports[`Go: trivialReachability: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node2 [style="filled";
label="node2 START START
empty block
implicit return";
id="node2";
shape="box";
fillcolor="lightgray";
minHeight=0.5;
height=0.8999999999999999;
];
}"
`;

exports[`Go: hasFallthrough: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node1 [style="filled";
label="node1 START START
1
1";
id="node1";
shape="invhouse";
fillcolor="#48AB30";
height=0.8999999999999999;
];
    node2 [style="filled";
label="node2 STATEMENT fallthrough";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node3 [style="filled";
label="node3 CASE_CONDITION 2";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node4 [style="filled";
label="node4 STATEMENT \"Include me!\"";
id="node4";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node7 [style="filled";
label="node7 SWITCH_MERGE 
implicit return";
id="node7";
shape="house";
fillcolor="#AB3030";
height=0.6;
];
    node1 -> node2 [penwidth=1;
color="green";
];
    node2 -> node4 [penwidth=1;
color="blue";
];
    node1 -> node3 [penwidth=1;
color="red";
];
    node3 -> node4 [penwidth=1;
color="green";
];
    node4 -> node7 [penwidth=1;
color="blue";
];
    node3 -> node7 [penwidth=1;
color="red";
];
}"
`;

exports[`Go: forever: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node0 [style="filled";
label="node0 START START";
id="node0";
shape="invhouse";
fillcolor="#48AB30";
height=0.5;
];
    node2 [style="filled";
label="node2 LOOP_HEAD loop head
empty block";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.6;
];
    node2 -> node2 [penwidth=2;
color="blue";
];
    node0 -> node2 [penwidth=1;
color="blue";
];
}"
`;

exports[`Go: forCond: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node0 [style="filled";
label="node0 START START";
id="node0";
shape="invhouse";
fillcolor="#48AB30";
height=0.5;
];
    node1 [style="filled";
label="node1 LOOP_HEAD loop head";
id="node1";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node2 [style="filled";
label="node2 EMPTY empty block";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node4 [style="filled";
label="node4 LOOP_EXIT loop exit
implicit return";
id="node4";
shape="house";
fillcolor="#AB3030";
height=0.6;
];
    node1 -> node2 [penwidth=1;
color="green";
];
    node2 -> node1 [penwidth=2;
color="blue";
];
    node0 -> node1 [penwidth=1;
color="blue";
];
    node1 -> node4 [penwidth=1;
color="red";
];
}"
`;

exports[`Go: forCStyle: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node0 [style="filled";
label="node0 START START";
id="node0";
shape="invhouse";
fillcolor="#48AB30";
height=0.5;
];
    node1 [style="filled";
label="node1 LOOP_HEAD loop head";
id="node1";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node2 [style="filled";
label="node2 EMPTY empty block";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node4 [style="filled";
label="node4 LOOP_EXIT loop exit
implicit return";
id="node4";
shape="house";
fillcolor="#AB3030";
height=0.6;
];
    node1 -> node2 [penwidth=1;
color="green";
];
    node2 -> node1 [penwidth=2;
color="blue";
];
    node0 -> node1 [penwidth=1;
color="blue";
];
    node1 -> node4 [penwidth=1;
color="red";
];
}"
`;

exports[`Go: forRange: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node0 [style="filled";
label="node0 START START";
id="node0";
shape="invhouse";
fillcolor="#48AB30";
height=0.5;
];
    node1 [style="filled";
label="node1 LOOP_HEAD loop head";
id="node1";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node2 [style="filled";
label="node2 EMPTY empty block";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node4 [style="filled";
label="node4 LOOP_EXIT loop exit
implicit return";
id="node4";
shape="house";
fillcolor="#AB3030";
height=0.6;
];
    node1 -> node2 [penwidth=1;
color="green";
];
    node2 -> node1 [penwidth=2;
color="blue";
];
    node0 -> node1 [penwidth=1;
color="blue";
];
    node1 -> node4 [penwidth=1;
color="red";
];
}"
`;

exports[`Go: typeSwitch: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node1 [style="filled";
label="node1 START START
v
int";
id="node1";
shape="invhouse";
fillcolor="#48AB30";
height=0.8999999999999999;
];
    node2 [style="filled";
label="node2 EMPTY empty block";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node3 [style="filled";
label="node3 CASE_CONDITION bool";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node4 [style="filled";
label="node4 EMPTY empty block";
id="node4";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node7 [style="filled";
label="node7 SWITCH_MERGE 
implicit return";
id="node7";
shape="house";
fillcolor="#AB3030";
height=0.6;
];
    node1 -> node2 [penwidth=1;
color="green";
];
    node1 -> node3 [penwidth=1;
color="red";
];
    node3 -> node4 [penwidth=1;
color="green";
];
    node2 -> node7 [penwidth=1;
color="blue";
];
    node4 -> node7 [penwidth=1;
color="blue";
];
    node3 -> node7 [penwidth=1;
color="red";
];
}"
`;

exports[`Go: Select: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node2 [style="filled";
label="node2 START START
x, y := 0, 1

c <- x";
id="node2";
shape="invhouse";
fillcolor="#48AB30";
height=1.2;
];
    node9 [style="filled";
label="node9 STATEMENT x, y = y, x+y

implicit return";
id="node9";
shape="house";
fillcolor="#AB3030";
height=0.8999999999999999;
];
    node6 [style="filled";
label="node6 CASE_CONDITION <-quit
fmt.Println(\"quit\")
return";
id="node6";
shape="house";
fillcolor="#AB3030";
height=0.8999999999999999;
];
    node2 -> node6 [penwidth=1;
color="red";
];
    node2 -> node9 [penwidth=1;
color="green";
];
}"
`;

exports[`Go: Select2: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node2 [style="filled";
label="node2 START START
x, y := 0, 1

c <- x";
id="node2";
shape="invhouse";
fillcolor="#48AB30";
height=1.2;
];
    node3 [style="filled";
label="node3 STATEMENT x, y = y, x+y";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node4 [style="filled";
label="node4 CASE_CONDITION <-quit";
id="node4";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node11 [style="filled";
label="node11 SWITCH_MERGE 
implicit return";
id="node11";
shape="house";
fillcolor="#AB3030";
height=0.6;
];
    node6 [style="filled";
label="node6 STATEMENT fmt.Println(\"quit\")
return";
id="node6";
shape="house";
fillcolor="#AB3030";
height=0.6;
];
    node8 [style="filled";
label="node8 CASE_CONDITION <-y
f()";
id="node8";
shape="box";
fillcolor="lightgray";
height=0.6;
];
    node2 -> node3 [penwidth=1;
color="green";
];
    node2 -> node4 [penwidth=1;
color="red";
];
    node4 -> node6 [penwidth=1;
color="green";
];
    node4 -> node8 [penwidth=1;
color="red";
];
    node3 -> node11 [penwidth=1;
color="blue";
];
    node8 -> node11 [penwidth=1;
color="blue";
];
}"
`;

exports[`Python: trivial: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node2 [style="filled";
label="node2 START START
pass
implicit return";
id="node2";
shape="box";
fillcolor="lightgray";
minHeight=0.5;
height=0.8999999999999999;
];
}"
`;

exports[`Python: If: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node1 [style="filled";
label="node1 START START
if condition
x";
id="node1";
shape="invhouse";
fillcolor="#48AB30";
height=0.8999999999999999;
];
    node2 [style="filled";
label="node2 STATEMENT pass";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node6 [style="filled";
label="node6 MERGE if merge
pass
implicit return";
id="node6";
shape="house";
fillcolor="#AB3030";
height=0.8999999999999999;
];
    node1 -> node2 [penwidth=1;
color="green";
];
    node2 -> node6 [penwidth=1;
color="blue";
];
    node1 -> node6 [penwidth=1;
color="red";
];
}"
`;

exports[`Python: IfElse: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node1 [style="filled";
label="node1 START START
if condition
x";
id="node1";
shape="invhouse";
fillcolor="#48AB30";
height=0.8999999999999999;
];
    node2 [style="filled";
label="node2 STATEMENT f()";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node3 [style="filled";
label="node3 STATEMENT g()";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node7 [style="filled";
label="node7 MERGE if merge
h()
implicit return";
id="node7";
shape="house";
fillcolor="#AB3030";
height=0.8999999999999999;
];
    node1 -> node2 [penwidth=1;
color="green";
];
    node1 -> node3 [penwidth=1;
color="red";
];
    node2 -> node7 [penwidth=1;
color="blue";
];
    node3 -> node7 [penwidth=1;
color="blue";
];
}"
`;

exports[`Python: IfElifElse: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node1 [style="filled";
label="node1 START START
if condition
x";
id="node1";
shape="invhouse";
fillcolor="#48AB30";
height=0.8999999999999999;
];
    node2 [style="filled";
label="node2 STATEMENT f()";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node3 [style="filled";
label="node3 STATEMENT y";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node4 [style="filled";
label="node4 STATEMENT g()";
id="node4";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node5 [style="filled";
label="node5 STATEMENT h()";
id="node5";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node9 [style="filled";
label="node9 MERGE if merge
x()
implicit return";
id="node9";
shape="house";
fillcolor="#AB3030";
height=0.8999999999999999;
];
    node1 -> node2 [penwidth=1;
color="green";
];
    node1 -> node3 [penwidth=1;
color="red";
];
    node3 -> node4 [penwidth=1;
color="green";
];
    node3 -> node5 [penwidth=1;
color="red";
];
    node2 -> node9 [penwidth=1;
color="blue";
];
    node4 -> node9 [penwidth=1;
color="blue";
];
    node5 -> node9 [penwidth=1;
color="blue";
];
}"
`;

exports[`Python: For: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node0 [style="filled";
label="node0 START START";
id="node0";
shape="invhouse";
fillcolor="#48AB30";
height=0.5;
];
    node3 [style="filled";
label="node3 LOOP_HEAD loop head";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node1 [style="filled";
label="node1 STATEMENT pass";
id="node1";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node4 [style="filled";
label="node4 FOR_EXIT loop exit
implicit return";
id="node4";
shape="house";
fillcolor="#AB3030";
height=0.6;
];
    node3 -> node1 [penwidth=1;
color="green";
];
    node1 -> node3 [penwidth=2;
color="blue";
];
    node0 -> node3 [penwidth=1;
color="blue";
];
    node3 -> node4 [penwidth=1;
color="red";
];
}"
`;

exports[`Python: ForContinue: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node0 [style="filled";
label="node0 START START";
id="node0";
shape="invhouse";
fillcolor="#48AB30";
height=0.5;
];
    node7 [style="filled";
label="node7 LOOP_HEAD loop head";
id="node7";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node1 [style="filled";
label="node1 CONDITION if condition
x";
id="node1";
shape="box";
fillcolor="lightgray";
height=0.6;
];
    node8 [style="filled";
label="node8 FOR_EXIT loop exit
implicit return";
id="node8";
shape="house";
fillcolor="#AB3030";
height=0.6;
];
    node2 [style="filled";
label="node2 CONTINUE CONTINUE";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node5 [style="filled";
label="node5 MERGE if merge
pass";
id="node5";
shape="box";
fillcolor="lightgray";
height=0.6;
];
    node1 -> node2 [penwidth=1;
color="green";
];
    node5 -> node7 [penwidth=2;
color="blue";
];
    node2 -> node7 [penwidth=2;
color="blue";
];
    node0 -> node7 [penwidth=1;
color="blue";
];
    node7 -> node1 [penwidth=1;
color="green";
];
    node7 -> node8 [penwidth=1;
color="red";
];
    node1 -> node5 [penwidth=1;
color="red";
];
}"
`;

exports[`Python: ForBreak: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node0 [style="filled";
label="node0 START START";
id="node0";
shape="invhouse";
fillcolor="#48AB30";
height=0.5;
];
    node6 [style="filled";
label="node6 LOOP_HEAD loop head";
id="node6";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node1 [style="filled";
label="node1 CONDITION if condition
x";
id="node1";
shape="box";
fillcolor="lightgray";
height=0.6;
];
    node7 [style="filled";
label="node7 FOR_EXIT loop exit
implicit return";
id="node7";
shape="house";
fillcolor="#AB3030";
height=0.6;
];
    node2 [style="filled";
label="node2 BREAK BREAK";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node3 [style="filled";
label="node3 MERGE if merge";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node1 -> node2 [penwidth=1;
color="green";
];
    node1 -> node3 [penwidth=1;
color="red";
];
    node3 -> node6 [penwidth=2;
color="blue";
];
    node0 -> node6 [penwidth=1;
color="blue";
];
    node6 -> node1 [penwidth=1;
color="green";
];
    node6 -> node7 [penwidth=1;
color="red";
];
    node2 -> node7 [penwidth=1;
color="blue";
];
}"
`;

exports[`Python: ForElse: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node0 [style="filled";
label="node0 START START";
id="node0";
shape="invhouse";
fillcolor="#48AB30";
height=0.5;
];
    node4 [style="filled";
label="node4 LOOP_HEAD loop head";
id="node4";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node1 [style="filled";
label="node1 STATEMENT pass";
id="node1";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node2 [style="filled";
label="node2 RETURN return 2";
id="node2";
shape="house";
fillcolor="#AB3030";
height=0.5;
];
    node4 -> node1 [penwidth=1;
color="green";
];
    node1 -> node4 [penwidth=2;
color="blue";
];
    node4 -> node2 [penwidth=1;
color="red";
];
    node0 -> node4 [penwidth=1;
color="blue";
];
}"
`;

exports[`Python: ForElseBreak: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node0 [style="filled";
label="node0 START START";
id="node0";
shape="invhouse";
fillcolor="#48AB30";
height=0.5;
];
    node7 [style="filled";
label="node7 LOOP_HEAD loop head";
id="node7";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node5 [style="filled";
label="node5 STATEMENT pass";
id="node5";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node1 [style="filled";
label="node1 CONDITION if condition
x";
id="node1";
shape="box";
fillcolor="lightgray";
height=0.6;
];
    node2 [style="filled";
label="node2 BREAK BREAK";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node3 [style="filled";
label="node3 MERGE if merge";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node8 [style="filled";
label="node8 FOR_EXIT loop exit
implicit return";
id="node8";
shape="house";
fillcolor="#AB3030";
height=0.6;
];
    node1 -> node2 [penwidth=1;
color="green";
];
    node1 -> node3 [penwidth=1;
color="red";
];
    node3 -> node7 [penwidth=2;
color="blue";
];
    node7 -> node5 [penwidth=1;
color="red";
];
    node0 -> node7 [penwidth=1;
color="blue";
];
    node7 -> node1 [penwidth=1;
color="green";
];
    node5 -> node8 [penwidth=1;
color="blue";
];
    node2 -> node8 [penwidth=1;
color="blue";
];
}"
`;

exports[`Python: ForElseBreakReturn: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node0 [style="filled";
label="node0 START START";
id="node0";
shape="invhouse";
fillcolor="#48AB30";
height=0.5;
];
    node7 [style="filled";
label="node7 LOOP_HEAD loop head";
id="node7";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node5 [style="filled";
label="node5 RETURN return";
id="node5";
shape="house";
fillcolor="#AB3030";
height=0.5;
];
    node1 [style="filled";
label="node1 CONDITION if condition
x";
id="node1";
shape="box";
fillcolor="lightgray";
height=0.6;
];
    node3 [style="filled";
label="node3 MERGE if merge";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node8 [style="filled";
label="node8 BREAK BREAK
loop exit
implicit return";
id="node8";
shape="house";
fillcolor="#AB3030";
height=0.8999999999999999;
];
    node1 -> node3 [penwidth=1;
color="red";
];
    node3 -> node7 [penwidth=2;
color="blue";
];
    node7 -> node5 [penwidth=1;
color="red";
];
    node0 -> node7 [penwidth=1;
color="blue";
];
    node7 -> node1 [penwidth=1;
color="green";
];
    node1 -> node8 [penwidth=1;
color="green";
];
}"
`;

exports[`Python: While: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node0 [style="filled";
label="node0 START START";
id="node0";
shape="invhouse";
fillcolor="#48AB30";
height=0.5;
];
    node1 [style="filled";
label="node1 STATEMENT x";
id="node1";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node2 [style="filled";
label="node2 STATEMENT pass";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node4 [style="filled";
label="node4 FOR_EXIT loop exit
implicit return";
id="node4";
shape="house";
fillcolor="#AB3030";
height=0.6;
];
    node1 -> node2 [penwidth=1;
color="green";
];
    node2 -> node1 [penwidth=2;
color="blue";
];
    node0 -> node1 [penwidth=1;
color="blue";
];
    node1 -> node4 [penwidth=1;
color="red";
];
}"
`;

exports[`Python: WhileContinue: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node0 [style="filled";
label="node0 START START";
id="node0";
shape="invhouse";
fillcolor="#48AB30";
height=0.5;
];
    node1 [style="filled";
label="node1 STATEMENT x";
id="node1";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node2 [style="filled";
label="node2 CONDITION if condition
y";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.6;
];
    node8 [style="filled";
label="node8 FOR_EXIT loop exit
implicit return";
id="node8";
shape="house";
fillcolor="#AB3030";
height=0.6;
];
    node3 [style="filled";
label="node3 CONTINUE CONTINUE";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node6 [style="filled";
label="node6 MERGE if merge
pass";
id="node6";
shape="box";
fillcolor="lightgray";
height=0.6;
];
    node2 -> node3 [penwidth=1;
color="green";
];
    node6 -> node1 [penwidth=2;
color="blue";
];
    node3 -> node1 [penwidth=2;
color="blue";
];
    node0 -> node1 [penwidth=1;
color="blue";
];
    node1 -> node2 [penwidth=1;
color="green";
];
    node1 -> node8 [penwidth=1;
color="red";
];
    node2 -> node6 [penwidth=1;
color="red";
];
}"
`;

exports[`Python: WhileBreak: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node0 [style="filled";
label="node0 START START";
id="node0";
shape="invhouse";
fillcolor="#48AB30";
height=0.5;
];
    node1 [style="filled";
label="node1 STATEMENT x";
id="node1";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node2 [style="filled";
label="node2 CONDITION if condition
y";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.6;
];
    node7 [style="filled";
label="node7 FOR_EXIT loop exit
implicit return";
id="node7";
shape="house";
fillcolor="#AB3030";
height=0.6;
];
    node3 [style="filled";
label="node3 BREAK BREAK";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node4 [style="filled";
label="node4 MERGE if merge";
id="node4";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node2 -> node3 [penwidth=1;
color="green";
];
    node2 -> node4 [penwidth=1;
color="red";
];
    node4 -> node1 [penwidth=2;
color="blue";
];
    node0 -> node1 [penwidth=1;
color="blue";
];
    node1 -> node2 [penwidth=1;
color="green";
];
    node1 -> node7 [penwidth=1;
color="red";
];
    node3 -> node7 [penwidth=1;
color="blue";
];
}"
`;

exports[`Python: WhileElse: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node0 [style="filled";
label="node0 START START";
id="node0";
shape="invhouse";
fillcolor="#48AB30";
height=0.5;
];
    node1 [style="filled";
label="node1 STATEMENT x";
id="node1";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node2 [style="filled";
label="node2 STATEMENT pass";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node5 [style="filled";
label="node5 STATEMENT pass
loop exit
implicit return";
id="node5";
shape="house";
fillcolor="#AB3030";
height=0.8999999999999999;
];
    node1 -> node2 [penwidth=1;
color="green";
];
    node2 -> node1 [penwidth=2;
color="blue";
];
    node0 -> node1 [penwidth=1;
color="blue";
];
    node1 -> node5 [penwidth=1;
color="red";
];
}"
`;

exports[`Python: WhileElseBreak: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node0 [style="filled";
label="node0 START START";
id="node0";
shape="invhouse";
fillcolor="#48AB30";
height=0.5;
];
    node1 [style="filled";
label="node1 STATEMENT x";
id="node1";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node7 [style="filled";
label="node7 STATEMENT pass";
id="node7";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node2 [style="filled";
label="node2 CONDITION if condition
y";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.6;
];
    node3 [style="filled";
label="node3 BREAK BREAK";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node9 [style="filled";
label="node9 FOR_EXIT loop exit
implicit return";
id="node9";
shape="house";
fillcolor="#AB3030";
height=0.6;
];
    node6 [style="filled";
label="node6 MERGE if merge
pass";
id="node6";
shape="box";
fillcolor="lightgray";
height=0.6;
];
    node2 -> node3 [penwidth=1;
color="green";
];
    node1 -> node7 [penwidth=1;
color="red";
];
    node6 -> node1 [penwidth=2;
color="blue";
];
    node0 -> node1 [penwidth=1;
color="blue";
];
    node1 -> node2 [penwidth=1;
color="green";
];
    node7 -> node9 [penwidth=1;
color="blue";
];
    node3 -> node9 [penwidth=1;
color="blue";
];
    node2 -> node6 [penwidth=1;
color="red";
];
}"
`;

exports[`Python: Match: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node1 [style="filled";
label="node1 START START
x";
id="node1";
shape="invhouse";
fillcolor="#48AB30";
height=0.6;
];
    node4 [style="filled";
label="node4 CASE_CONDITION case 1:";
id="node4";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node7 [style="filled";
label="node7 MERGE match merge
implicit return";
id="node7";
shape="house";
fillcolor="#AB3030";
height=0.6;
];
    node3 [style="filled";
label="node3 STATEMENT pass";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node6 [style="filled";
label="node6 CASE_CONDITION case 2:";
id="node6";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node5 [style="filled";
label="node5 STATEMENT pass";
id="node5";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node4 -> node3 [penwidth=1;
color="green";
];
    node1 -> node4 [penwidth=1;
color="red";
];
    node6 -> node5 [penwidth=1;
color="green";
];
    node4 -> node6 [penwidth=1;
color="red";
];
    node1 -> node7 [penwidth=1;
color="red";
];
    node3 -> node7 [penwidth=1;
color="blue";
];
    node5 -> node7 [penwidth=1;
color="blue";
];
    node6 -> node7 [penwidth=1;
color="red";
];
}"
`;

exports[`Python: MatchMultiPattern: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node1 [style="filled";
label="node1 START START
x";
id="node1";
shape="invhouse";
fillcolor="#48AB30";
height=0.6;
];
    node4 [style="filled";
label="node4 CASE_CONDITION case 1, 2, 3:";
id="node4";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node7 [style="filled";
label="node7 MERGE match merge
implicit return";
id="node7";
shape="house";
fillcolor="#AB3030";
height=0.6;
];
    node3 [style="filled";
label="node3 RETURN return";
id="node3";
shape="house";
fillcolor="#AB3030";
height=0.5;
];
    node6 [style="filled";
label="node6 CASE_CONDITION case 4, 5:";
id="node6";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node5 [style="filled";
label="node5 RETURN return";
id="node5";
shape="house";
fillcolor="#AB3030";
height=0.5;
];
    node4 -> node3 [penwidth=1;
color="green";
];
    node1 -> node4 [penwidth=1;
color="red";
];
    node6 -> node5 [penwidth=1;
color="green";
];
    node4 -> node6 [penwidth=1;
color="red";
];
    node1 -> node7 [penwidth=1;
color="red";
];
    node6 -> node7 [penwidth=1;
color="red";
];
}"
`;

exports[`Python: Return: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node1 [style="filled";
label="node1 START START
if condition
x";
id="node1";
shape="invhouse";
fillcolor="#48AB30";
height=0.8999999999999999;
];
    node2 [style="filled";
label="node2 RETURN return 1";
id="node2";
shape="house";
fillcolor="#AB3030";
height=0.5;
];
    node5 [style="filled";
label="node5 MERGE if merge
return 2";
id="node5";
shape="house";
fillcolor="#AB3030";
height=0.6;
];
    node1 -> node2 [penwidth=1;
color="green";
];
    node1 -> node5 [penwidth=1;
color="red";
];
}"
`;

exports[`Python: WithCluster: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
subgraph cluster_0 {
penwidth=0;
color="white";
bgcolor="#ffddff";
    node3 [style="filled";
label="node3 CONDITION if condition
f()";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.6;
];
    node4 [style="filled";
label="node4 STATEMENT g()";
id="node4";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node7 [style="filled";
label="node7 MERGE if merge
h()";
id="node7";
shape="box";
fillcolor="lightgray";
height=0.6;
];
    node3 -> node4 [penwidth=1;
color="green";
];
    node4 -> node7 [penwidth=1;
color="blue";
];
    node3 -> node7 [penwidth=1;
color="red";
];

}subgraph cluster_1 {
penwidth=0;
color="white";
bgcolor="#ffddff";
    node9 [style="filled";
label="node9 STATEMENT pass";
id="node9";
shape="box";
fillcolor="lightgray";
height=0.3;
];

}    node2 [style="filled";
label="node2 START START
pass
x";
id="node2";
shape="invhouse";
fillcolor="#48AB30";
height=0.8999999999999999;
];
    node3 [style="filled";
label="node3 CONDITION if condition
f()";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.6;
];
    node4 [style="filled";
label="node4 STATEMENT g()";
id="node4";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node7 [style="filled";
label="node7 MERGE if merge
h()";
id="node7";
shape="box";
fillcolor="lightgray";
height=0.6;
];
    node8 [style="filled";
label="node8 STATEMENT y";
id="node8";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node9 [style="filled";
label="node9 STATEMENT pass";
id="node9";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node11 [style="filled";
label="node11 STATEMENT pass
implicit return";
id="node11";
shape="house";
fillcolor="#AB3030";
height=0.6;
];
    node8 -> node9 [penwidth=1;
color="blue";
];
    node7 -> node8 [penwidth=1;
color="blue";
];
    node2 -> node3 [penwidth=1;
color="blue";
];
    node9 -> node11 [penwidth=1;
color="blue";
];
}"
`;

exports[`Python: WithNestedCluster: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
subgraph cluster_0 {
penwidth=0;
color="white";
bgcolor="#ffddff";
    node2 [style="filled";
label="node2 CONDITION if condition
f()";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.6;
];
    node3 [style="filled";
label="node3 STATEMENT g()";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node6 [style="filled";
label="node6 MERGE if merge
h()";
id="node6";
shape="box";
fillcolor="lightgray";
height=0.6;
];
    node2 -> node3 [penwidth=1;
color="green";
];
    node3 -> node6 [penwidth=1;
color="blue";
];
    node2 -> node6 [penwidth=1;
color="red";
];

}subgraph cluster_1 {
penwidth=0;
color="white";
bgcolor="#ffddff";
    node8 [style="filled";
label="node8 CONDITION if condition
z";
id="node8";
shape="box";
fillcolor="lightgray";
height=0.6;
];
    node9 [style="filled";
label="node9 STATEMENT z";
id="node9";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node16 [style="filled";
label="node16 RETURN return";
id="node16";
shape="house";
fillcolor="#AB3030";
height=0.5;
];
    node17 [style="filled";
label="node17 MERGE if merge";
id="node17";
shape="box";
fillcolor="lightgray";
height=0.3;
];

subgraph cluster_2 {
penwidth=6;
color="white";
bgcolor="#ffddff";
    node10 [style="filled";
label="node10 STATEMENT a";
id="node10";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node11 [style="filled";
label="node11 MERGE match merge";
id="node11";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node13 [style="filled";
label="node13 CASE_CONDITION case 1:";
id="node13";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node12 [style="filled";
label="node12 STATEMENT pass";
id="node12";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node15 [style="filled";
label="node15 CASE_CONDITION case 2:";
id="node15";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node14 [style="filled";
label="node14 STATEMENT pass";
id="node14";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node10 -> node11 [penwidth=1;
color="red";
];
    node13 -> node12 [penwidth=1;
color="green";
];
    node12 -> node11 [penwidth=1;
color="blue";
];
    node10 -> node13 [penwidth=1;
color="red";
];
    node15 -> node14 [penwidth=1;
color="green";
];
    node14 -> node11 [penwidth=1;
color="blue";
];
    node13 -> node15 [penwidth=1;
color="red";
];
    node15 -> node11 [penwidth=1;
color="red";
];

}
    node8 -> node9 [penwidth=1;
color="green";
];
    node8 -> node16 [penwidth=1;
color="red";
];

}    node1 [style="filled";
label="node1 START START
x";
id="node1";
shape="invhouse";
fillcolor="#48AB30";
height=0.6;
];
    node2 [style="filled";
label="node2 CONDITION if condition
f()";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.6;
];
    node3 [style="filled";
label="node3 STATEMENT g()";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node6 [style="filled";
label="node6 MERGE if merge
h()";
id="node6";
shape="box";
fillcolor="lightgray";
height=0.6;
];
    node7 [style="filled";
label="node7 STATEMENT y";
id="node7";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node8 [style="filled";
label="node8 CONDITION if condition
z";
id="node8";
shape="box";
fillcolor="lightgray";
height=0.6;
];
    node9 [style="filled";
label="node9 STATEMENT z";
id="node9";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node16 [style="filled";
label="node16 RETURN return";
id="node16";
shape="house";
fillcolor="#AB3030";
height=0.5;
];
    node10 [style="filled";
label="node10 STATEMENT a";
id="node10";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node11 [style="filled";
label="node11 MERGE match merge";
id="node11";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node13 [style="filled";
label="node13 CASE_CONDITION case 1:";
id="node13";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node17 [style="filled";
label="node17 MERGE if merge";
id="node17";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node12 [style="filled";
label="node12 STATEMENT pass";
id="node12";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node15 [style="filled";
label="node15 CASE_CONDITION case 2:";
id="node15";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node19 [style="filled";
label="node19 RETURN implicit return";
id="node19";
shape="house";
fillcolor="#AB3030";
height=0.5;
];
    node14 [style="filled";
label="node14 STATEMENT pass";
id="node14";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node9 -> node10 [penwidth=1;
color="blue";
];
    node11 -> node17 [penwidth=1;
color="blue";
];
    node6 -> node7 [penwidth=1;
color="blue";
];
    node17 -> node19 [penwidth=1;
color="blue";
];
    node1 -> node2 [penwidth=1;
color="blue";
];
    node7 -> node8 [penwidth=1;
color="blue";
];
}"
`;

exports[`Python: raise_exception: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node0 [style="filled";
label="node0 START START";
id="node0";
shape="invhouse";
fillcolor="#48AB30";
height=0.5;
];
    node1 [style="filled";
label="node1 THROW raise";
id="node1";
shape="triangle";
fillcolor="#fdd";
height=0.5;
];
    node0 -> node1 [penwidth=1;
color="blue";
];
}"
`;

exports[`Python: raise_again: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
subgraph cluster_0 {
penwidth=0;
color="white";
bgcolor="#ddddff";

subgraph cluster_1 {
penwidth=0;
color="white";
bgcolor="#ddffdd";
    node2 [style="filled";
label="node2 THROW raise x";
id="node2";
shape="triangle";
fillcolor="#fdd";
height=0.3;
];

}

subgraph cluster_2 {
penwidth=0;
color="white";
bgcolor="#ffdddd";
    node3 [style="filled";
label="node3 CONDITION if condition
x";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.6;
];
    node4 [style="filled";
label="node4 STATEMENT pass";
id="node4";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node5 [style="filled";
label="node5 MERGE if merge";
id="node5";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node3 -> node4 [penwidth=1;
color="green";
];
    node4 -> node5 [penwidth=1;
color="blue";
];
    node3 -> node5 [penwidth=1;
color="red";
];

}

}    node0 [style="filled";
label="node0 START START";
id="node0";
shape="invhouse";
fillcolor="#48AB30";
height=0.5;
];
    node2 [style="filled";
label="node2 THROW raise x";
id="node2";
shape="triangle";
fillcolor="#fdd";
height=0.3;
];
    node3 [style="filled";
label="node3 CONDITION if condition
x";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.6;
];
    node4 [style="filled";
label="node4 STATEMENT pass";
id="node4";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node5 [style="filled";
label="node5 MERGE if merge";
id="node5";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node11 [style="filled";
label="node11 MERGE merge try-complex
implicit return";
id="node11";
shape="house";
fillcolor="#AB3030";
height=0.6;
];
    node0 -> node2 [penwidth=1;
color="blue";
];
    node2 -> node3 [penwidth=1;
color="blue";
style="invis";
headport="e";
tailport="w";
];
    node5 -> node11 [penwidth=1;
color="blue";
];
}"
`;

exports[`Python: yield_value: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
    node0 [style="filled";
label="node0 START START";
id="node0";
shape="invhouse";
fillcolor="#48AB30";
height=0.5;
];
    node3 [style="filled";
label="node3 LOOP_HEAD loop head";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node1 [style="filled";
label="node1 YIELD yield x";
id="node1";
shape="hexagon";
fillcolor="deepskyblue";
orientation=90;
height=0.3;
];
    node4 [style="filled";
label="node4 FOR_EXIT loop exit
implicit return";
id="node4";
shape="house";
fillcolor="#AB3030";
height=0.6;
];
    node3 -> node1 [penwidth=1;
color="green";
];
    node1 -> node3 [penwidth=2;
color="blue";
];
    node0 -> node3 [penwidth=1;
color="blue";
];
    node3 -> node4 [penwidth=1;
color="red";
];
}"
`;

exports[`Python: try_except: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
subgraph cluster_0 {
penwidth=0;
color="white";
bgcolor="#ddddff";

subgraph cluster_1 {
penwidth=0;
color="white";
bgcolor="#ddffdd";
    node2 [style="filled";
label="node2 STATEMENT f()";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.3;
];

}

subgraph cluster_2 {
penwidth=0;
color="white";
bgcolor="#ffdddd";
    node3 [style="filled";
label="node3 STATEMENT g()";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.3;
];

}

}    node0 [style="filled";
label="node0 START START";
id="node0";
shape="invhouse";
fillcolor="#48AB30";
height=0.5;
];
    node2 [style="filled";
label="node2 STATEMENT f()";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node3 [style="filled";
label="node3 STATEMENT g()";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node4 [style="filled";
label="node4 MERGE merge try-complex
return";
id="node4";
shape="house";
fillcolor="#AB3030";
height=0.6;
];
    node2 -> node3 [penwidth=1;
color="blue";
style="invis";
headport="e";
tailport="w";
];
    node0 -> node2 [penwidth=1;
color="blue";
];
    node3 -> node4 [penwidth=1;
color="blue";
];
    node2 -> node4 [penwidth=1;
color="blue";
];
}"
`;

exports[`Python: try_except_finally: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
subgraph cluster_0 {
penwidth=0;
color="white";
bgcolor="#ddddff";

subgraph cluster_1 {
penwidth=0;
color="white";
bgcolor="#ddffdd";
    node2 [style="filled";
label="node2 STATEMENT f()";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.3;
];

}

subgraph cluster_2 {
penwidth=0;
color="white";
bgcolor="#ffdddd";
    node3 [style="filled";
label="node3 STATEMENT g()";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.3;
];

}

subgraph cluster_3 {
penwidth=0;
color="white";
bgcolor="#ffffdd";
    node4 [style="filled";
label="node4 STATEMENT h()";
id="node4";
shape="box";
fillcolor="lightgray";
height=0.3;
];

}

}    node0 [style="filled";
label="node0 START START";
id="node0";
shape="invhouse";
fillcolor="#48AB30";
height=0.5;
];
    node2 [style="filled";
label="node2 STATEMENT f()";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node3 [style="filled";
label="node3 STATEMENT g()";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node4 [style="filled";
label="node4 STATEMENT h()";
id="node4";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node5 [style="filled";
label="node5 MERGE merge try-complex
return";
id="node5";
shape="house";
fillcolor="#AB3030";
height=0.6;
];
    node2 -> node3 [penwidth=1;
color="blue";
style="invis";
headport="e";
tailport="w";
];
    node2 -> node4 [penwidth=1;
color="blue";
];
    node3 -> node4 [penwidth=1;
color="blue";
];
    node0 -> node2 [penwidth=1;
color="blue";
];
    node4 -> node5 [penwidth=1;
color="blue";
];
}"
`;

exports[`Python: try_many_except_finally: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
subgraph cluster_0 {
penwidth=0;
color="white";
bgcolor="#ddddff";
    node7 [style="filled";
label="node7 RETURN return";
id="node7";
shape="house";
fillcolor="#AB3030";
height=0.5;
];

subgraph cluster_1 {
penwidth=0;
color="white";
bgcolor="#ddffdd";
    node2 [style="filled";
label="node2 STATEMENT f()";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.3;
];

}

subgraph cluster_2 {
penwidth=0;
color="white";
bgcolor="#ffdddd";
    node3 [style="filled";
label="node3 STATEMENT g()";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.3;
];

}

subgraph cluster_3 {
penwidth=0;
color="white";
bgcolor="#ffdddd";
    node4 [style="filled";
label="node4 STATEMENT aa()";
id="node4";
shape="box";
fillcolor="lightgray";
height=0.3;
];

}

subgraph cluster_4 {
penwidth=0;
color="white";
bgcolor="#ffdddd";
    node5 [style="filled";
label="node5 RETURN return";
id="node5";
shape="box";
fillcolor="lightgray";
height=0.3;
];

}

subgraph cluster_5 {
penwidth=0;
color="white";
bgcolor="#ffffdd";
    node8 [style="filled";
label="node8 STATEMENT h()";
id="node8";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node6 [style="filled";
label="node6 STATEMENT h()";
id="node6";
shape="box";
fillcolor="lightgray";
height=0.3;
];

}

}    node0 [style="filled";
label="node0 START START";
id="node0";
shape="invhouse";
fillcolor="#48AB30";
height=0.5;
];
    node2 [style="filled";
label="node2 STATEMENT f()";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node3 [style="filled";
label="node3 STATEMENT g()";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node4 [style="filled";
label="node4 STATEMENT aa()";
id="node4";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node5 [style="filled";
label="node5 RETURN return";
id="node5";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node8 [style="filled";
label="node8 STATEMENT h()";
id="node8";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node6 [style="filled";
label="node6 STATEMENT h()";
id="node6";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node7 [style="filled";
label="node7 RETURN return";
id="node7";
shape="house";
fillcolor="#AB3030";
height=0.5;
];
    node9 [style="filled";
label="node9 MERGE merge try-complex
return";
id="node9";
shape="house";
fillcolor="#AB3030";
height=0.6;
];
    node2 -> node3 [penwidth=1;
color="blue";
style="invis";
headport="e";
tailport="w";
];
    node2 -> node4 [penwidth=1;
color="blue";
style="invis";
headport="e";
tailport="w";
];
    node2 -> node5 [penwidth=1;
color="blue";
style="invis";
headport="e";
tailport="w";
];
    node5 -> node6 [penwidth=1;
color="blue";
];
    node6 -> node7 [penwidth=1;
color="blue";
];
    node2 -> node8 [penwidth=1;
color="blue";
];
    node3 -> node8 [penwidth=1;
color="blue";
];
    node4 -> node8 [penwidth=1;
color="blue";
];
    node0 -> node2 [penwidth=1;
color="blue";
];
    node8 -> node9 [penwidth=1;
color="blue";
];
}"
`;

exports[`Python: try_except_else_finally: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
subgraph cluster_0 {
penwidth=0;
color="white";
bgcolor="#ddddff";
    node4 [style="filled";
label="node4 STATEMENT pass";
id="node4";
shape="box";
fillcolor="lightgray";
height=0.3;
];

subgraph cluster_1 {
penwidth=0;
color="white";
bgcolor="#ddffdd";
    node2 [style="filled";
label="node2 STATEMENT pass";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.3;
];

}

subgraph cluster_2 {
penwidth=0;
color="white";
bgcolor="#ffdddd";
    node3 [style="filled";
label="node3 STATEMENT pass";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.3;
];

}

subgraph cluster_3 {
penwidth=0;
color="white";
bgcolor="#ffffdd";
    node5 [style="filled";
label="node5 STATEMENT pass";
id="node5";
shape="box";
fillcolor="lightgray";
height=0.3;
];

}

}    node0 [style="filled";
label="node0 START START";
id="node0";
shape="invhouse";
fillcolor="#48AB30";
height=0.5;
];
    node2 [style="filled";
label="node2 STATEMENT pass";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node3 [style="filled";
label="node3 STATEMENT pass";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node4 [style="filled";
label="node4 STATEMENT pass";
id="node4";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node5 [style="filled";
label="node5 STATEMENT pass";
id="node5";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node6 [style="filled";
label="node6 MERGE merge try-complex
implicit return";
id="node6";
shape="house";
fillcolor="#AB3030";
height=0.6;
];
    node2 -> node3 [penwidth=1;
color="blue";
style="invis";
headport="e";
tailport="w";
];
    node2 -> node4 [penwidth=1;
color="blue";
];
    node4 -> node5 [penwidth=1;
color="blue";
];
    node3 -> node5 [penwidth=1;
color="blue";
];
    node0 -> node2 [penwidth=1;
color="blue";
];
    node5 -> node6 [penwidth=1;
color="blue";
];
}"
`;

exports[`Python: massive_try_except_else_finally: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
subgraph cluster_0 {
penwidth=0;
color="white";
bgcolor="#ddddff";
    node12 [style="filled";
label="node12 CONDITION if condition
x";
id="node12";
shape="box";
fillcolor="lightgray";
height=0.6;
];
    node13 [style="filled";
label="node13 STATEMENT pass";
id="node13";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node14 [style="filled";
label="node14 STATEMENT pass";
id="node14";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node15 [style="filled";
label="node15 MERGE if merge";
id="node15";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node17 [style="filled";
label="node17 MERGE merge try-complex";
id="node17";
shape="box";
fillcolor="lightgray";
height=0.3;
];

subgraph cluster_1 {
penwidth=0;
color="white";
bgcolor="#ddffdd";
    node2 [style="filled";
label="node2 MERGE merge try-complex";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.3;
];

subgraph cluster_2 {
penwidth=0;
color="white";
bgcolor="#ddddff";
    node5 [style="filled";
label="node5 STATEMENT pass";
id="node5";
shape="box";
fillcolor="lightgray";
height=0.3;
];

subgraph cluster_3 {
penwidth=0;
color="white";
bgcolor="#ddffdd";
    node3 [style="filled";
label="node3 STATEMENT pass";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.3;
];

}

subgraph cluster_4 {
penwidth=0;
color="white";
bgcolor="#ffdddd";
    node4 [style="filled";
label="node4 STATEMENT pass";
id="node4";
shape="box";
fillcolor="lightgray";
height=0.3;
];

}

subgraph cluster_5 {
penwidth=0;
color="white";
bgcolor="#ffffdd";
    node6 [style="filled";
label="node6 STATEMENT pass";
id="node6";
shape="box";
fillcolor="lightgray";
height=0.3;
];

}

}

}

subgraph cluster_6 {
penwidth=0;
color="white";
bgcolor="#ffdddd";
    node7 [style="filled";
label="node7 MERGE merge try-complex";
id="node7";
shape="box";
fillcolor="lightgray";
height=0.3;
];

subgraph cluster_7 {
penwidth=0;
color="white";
bgcolor="#ddddff";
    node10 [style="filled";
label="node10 STATEMENT pass";
id="node10";
shape="box";
fillcolor="lightgray";
height=0.3;
];

subgraph cluster_8 {
penwidth=0;
color="white";
bgcolor="#ddffdd";
    node8 [style="filled";
label="node8 STATEMENT pass";
id="node8";
shape="box";
fillcolor="lightgray";
height=0.3;
];

}

subgraph cluster_9 {
penwidth=0;
color="white";
bgcolor="#ffdddd";
    node9 [style="filled";
label="node9 STATEMENT pass";
id="node9";
shape="box";
fillcolor="lightgray";
height=0.3;
];

}

subgraph cluster_10 {
penwidth=0;
color="white";
bgcolor="#ffffdd";
    node11 [style="filled";
label="node11 STATEMENT pass";
id="node11";
shape="box";
fillcolor="lightgray";
height=0.3;
];

}

}

}

subgraph cluster_11 {
penwidth=6;
color="white";
bgcolor="#ddddff";

subgraph cluster_12 {
penwidth=0;
color="white";
bgcolor="#ddffdd";
    node18 [style="filled";
label="node18 STATEMENT pass";
id="node18";
shape="box";
fillcolor="lightgray";
height=0.3;
];

}

subgraph cluster_13 {
penwidth=0;
color="white";
bgcolor="#ffffdd";
    node19 [style="filled";
label="node19 STATEMENT pass";
id="node19";
shape="box";
fillcolor="lightgray";
height=0.3;
];

}

}

subgraph cluster_14 {
penwidth=0;
color="white";
bgcolor="#ffffdd";
    node20 [style="filled";
label="node20 STATEMENT x";
id="node20";
shape="box";
fillcolor="lightgray";
height=0.3;
];

subgraph cluster_15 {
penwidth=0;
color="white";
bgcolor="#ffddff";
    node23 [style="filled";
label="node23 LOOP_HEAD loop head";
id="node23";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node21 [style="filled";
label="node21 STATEMENT pass";
id="node21";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node22 [style="filled";
label="node22 FOR_EXIT loop exit";
id="node22";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node23 -> node21 [penwidth=1;
color="green";
];
    node21 -> node23 [penwidth=2;
color="blue";
];
    node23 -> node22 [penwidth=1;
color="red";
];

}

}
    node12 -> node13 [penwidth=1;
color="green";
];
    node13 -> node15 [penwidth=1;
color="blue";
];
    node12 -> node14 [penwidth=1;
color="red";
];
    node14 -> node15 [penwidth=1;
color="blue";
];

}    node0 [style="filled";
label="node0 START START";
id="node0";
shape="invhouse";
fillcolor="#48AB30";
height=0.5;
];
    node3 [style="filled";
label="node3 STATEMENT pass";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node4 [style="filled";
label="node4 STATEMENT pass";
id="node4";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node5 [style="filled";
label="node5 STATEMENT pass";
id="node5";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node8 [style="filled";
label="node8 STATEMENT pass";
id="node8";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node6 [style="filled";
label="node6 STATEMENT pass";
id="node6";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node9 [style="filled";
label="node9 STATEMENT pass";
id="node9";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node10 [style="filled";
label="node10 STATEMENT pass";
id="node10";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node2 [style="filled";
label="node2 MERGE merge try-complex";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node11 [style="filled";
label="node11 STATEMENT pass";
id="node11";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node7 [style="filled";
label="node7 MERGE merge try-complex";
id="node7";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node12 [style="filled";
label="node12 CONDITION if condition
x";
id="node12";
shape="box";
fillcolor="lightgray";
height=0.6;
];
    node20 [style="filled";
label="node20 STATEMENT x";
id="node20";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node13 [style="filled";
label="node13 STATEMENT pass";
id="node13";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node14 [style="filled";
label="node14 STATEMENT pass";
id="node14";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node23 [style="filled";
label="node23 LOOP_HEAD loop head";
id="node23";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node15 [style="filled";
label="node15 MERGE if merge";
id="node15";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node21 [style="filled";
label="node21 STATEMENT pass";
id="node21";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node22 [style="filled";
label="node22 FOR_EXIT loop exit";
id="node22";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node18 [style="filled";
label="node18 STATEMENT pass";
id="node18";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node19 [style="filled";
label="node19 STATEMENT pass";
id="node19";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node24 [style="filled";
label="node24 MERGE merge try-complex
implicit return";
id="node24";
shape="house";
fillcolor="#AB3030";
height=0.6;
];
    node17 [style="filled";
label="node17 MERGE merge try-complex";
id="node17";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node3 -> node4 [penwidth=1;
color="blue";
style="invis";
headport="e";
tailport="w";
];
    node3 -> node5 [penwidth=1;
color="blue";
];
    node5 -> node6 [penwidth=1;
color="blue";
];
    node4 -> node6 [penwidth=1;
color="blue";
];
    node6 -> node2 [penwidth=1;
color="blue";
];
    node8 -> node9 [penwidth=1;
color="blue";
style="invis";
headport="e";
tailport="w";
];
    node8 -> node10 [penwidth=1;
color="blue";
];
    node10 -> node11 [penwidth=1;
color="blue";
];
    node9 -> node11 [penwidth=1;
color="blue";
];
    node11 -> node7 [penwidth=1;
color="blue";
];
    node3 -> node8 [penwidth=1;
color="blue";
style="invis";
headport="e";
tailport="w";
];
    node18 -> node19 [penwidth=1;
color="blue";
];
    node19 -> node17 [penwidth=1;
color="blue";
];
    node15 -> node18 [penwidth=1;
color="blue";
];
    node20 -> node23 [penwidth=1;
color="blue";
];
    node17 -> node20 [penwidth=1;
color="blue";
];
    node7 -> node20 [penwidth=1;
color="blue";
];
    node0 -> node3 [penwidth=1;
color="blue";
];
    node2 -> node12 [penwidth=1;
color="blue";
];
    node22 -> node24 [penwidth=1;
color="blue";
];
}"
`;

exports[`Python: try_finally: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
subgraph cluster_0 {
penwidth=0;
color="white";
bgcolor="#ddddff";
    node8 [style="filled";
label="node8 RETURN return";
id="node8";
shape="house";
fillcolor="#AB3030";
height=0.5;
];

subgraph cluster_1 {
penwidth=0;
color="white";
bgcolor="#ddffdd";
    node2 [style="filled";
label="node2 CONDITION if condition
x";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.6;
];
    node3 [style="filled";
label="node3 RETURN return";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node6 [style="filled";
label="node6 MERGE if merge
pass";
id="node6";
shape="box";
fillcolor="lightgray";
height=0.6;
];
    node2 -> node3 [penwidth=1;
color="green";
];
    node2 -> node6 [penwidth=1;
color="red";
];

}

subgraph cluster_2 {
penwidth=0;
color="white";
bgcolor="#ffffdd";
    node7 [style="filled";
label="node7 STATEMENT pass";
id="node7";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node9 [style="filled";
label="node9 STATEMENT pass";
id="node9";
shape="box";
fillcolor="lightgray";
height=0.3;
];

}

}    node0 [style="filled";
label="node0 START START";
id="node0";
shape="invhouse";
fillcolor="#48AB30";
height=0.5;
];
    node2 [style="filled";
label="node2 CONDITION if condition
x";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.6;
];
    node3 [style="filled";
label="node3 RETURN return";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node7 [style="filled";
label="node7 STATEMENT pass";
id="node7";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node6 [style="filled";
label="node6 MERGE if merge
pass";
id="node6";
shape="box";
fillcolor="lightgray";
height=0.6;
];
    node8 [style="filled";
label="node8 RETURN return";
id="node8";
shape="house";
fillcolor="#AB3030";
height=0.5;
];
    node9 [style="filled";
label="node9 STATEMENT pass";
id="node9";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node10 [style="filled";
label="node10 MERGE merge try-complex
implicit return";
id="node10";
shape="house";
fillcolor="#AB3030";
height=0.6;
];
    node3 -> node7 [penwidth=1;
color="blue";
];
    node7 -> node8 [penwidth=1;
color="blue";
];
    node6 -> node9 [penwidth=1;
color="blue";
];
    node0 -> node2 [penwidth=1;
color="blue";
];
    node9 -> node10 [penwidth=1;
color="blue";
];
}"
`;

exports[`Python: try_with_finally: DOT Snapshot 1`] = `
"digraph "" {
    node [shape=box];
    edge [headport=n tailport=s]
    bgcolor="transparent"
subgraph cluster_0 {
penwidth=0;
color="white";
bgcolor="#ddddff";
    node6 [style="filled";
label="node6 RETURN return";
id="node6";
shape="house";
fillcolor="#AB3030";
height=0.5;
];

subgraph cluster_1 {
penwidth=0;
color="white";
bgcolor="#ddffdd";
    node2 [style="filled";
label="node2 STATEMENT x";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.3;
];

subgraph cluster_2 {
penwidth=0;
color="white";
bgcolor="#ffddff";
    node3 [style="filled";
label="node3 RETURN return";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.3;
];

}

}

subgraph cluster_3 {
penwidth=0;
color="white";
bgcolor="#ffffdd";
    node5 [style="filled";
label="node5 STATEMENT pass";
id="node5";
shape="box";
fillcolor="lightgray";
height=0.3;
];

}

}    node0 [style="filled";
label="node0 START START";
id="node0";
shape="invhouse";
fillcolor="#48AB30";
height=0.5;
];
    node2 [style="filled";
label="node2 STATEMENT x";
id="node2";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node3 [style="filled";
label="node3 RETURN return";
id="node3";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node5 [style="filled";
label="node5 STATEMENT pass";
id="node5";
shape="box";
fillcolor="lightgray";
height=0.3;
];
    node6 [style="filled";
label="node6 RETURN return";
id="node6";
shape="house";
fillcolor="#AB3030";
height=0.5;
];
    node2 -> node3 [penwidth=1;
color="blue";
];
    node3 -> node5 [penwidth=1;
color="blue";
];
    node5 -> node6 [penwidth=1;
color="blue";
];
    node0 -> node2 [penwidth=1;
color="blue";
];
}"
`;
